Java concepts differences `extends` vs `implements` vs `abstract class` 

abstraction(philosophically)

- a less detailed representation of something in reality
- it is a fundamental part of reality and it gives rise to information processing tools like computers/human brains to actually function (take a minute to think how)
    - both computers and human brains try to represent the reality in an abstract but still useful way
        - computers use binary digits (digital circuits) to represent real world information
        - human brains use chemicals and electrical impulses to represent real world information like sound, emotions, and senses etc
- goal: to have the ability to model/represent real world information, keeping enough details to still be useful. this is arguably as important as the things in physical reality which they represents

abstraction(in programming)

- hiding details of classes, variables or methods from the parts of the system which interact and use them (weak abstraction because we share more stuff compared to interface)

inheritance

- it is a mechanism in which a software entity, such as a class, can inherit(share) implementations from another software entity
- provides a weak mechanism for abstraction (programming sense of abstraction)
- therefore, we use inheritance when we want to share implementations(variables, methods and methods body) between a set of classes that are related
    - for example: when we build desktop/mobile applications in java, we inherit basic user interface implementation from platform libraries like Swing, JavaFX or the Android SDK
        - the entry point for a javafx application is the main class which extends the Application class from javafx, which contains IMPLEMENTATIONS(variables and methods) for interacting with the operating system like the `Stage` object and the `start()` methods

Type/class theory/hierarchy

- classifying things based on what is and is not common between them
- a way to describe relationships between different classification
- OOP languages are designed to build these kind of class hierachy (parent(super) and child(sub) share common attributes)
    - in java, we use `class` to represent the objects and `extends` to describe the relationships between the objects in a hierarchy known as inheritance
    - the `extends` keyword is how you implement inheritance in your code in java
    - this means any non-private variable or method will be accessible to the inheriting(subclass) class, even though they are not defined within the body of the inheriting class
    - whenever the constructor of the parent class requires arguments to be passed from the subclass in the parent class, we can use the `super(arg1,arg2...)`

Interface

- allows us to share behavior, but not implementation among classes (strong abstraction)
    - specifically, it allows us to define method, but not its implementation (body)
    - these methods are called "abstract method"

        - the `<T>`(represent type) is a generic type which allows whatever class that implements this interface and its functions to decide what type will be used
        - you can use whatever name you want, as long as its not a reserved keyward like `void` and `new`
- behavior vs implementation (sharing all parts of the method(access modifier,return type,name,parameter) except body)

- isnt this creating extra work for us?
    - no its not because we usually have objects that share the same behavior, but performs it differently (different implementation)
        - for example: two objects need to handle an event, they have the same behavior `handle()`but they could handle the event differently (different implementations)
- implementing an interface using the `implements` keyword
    - you must also add a special annotation `@Override` on top of the method. this will tell the compiler and the IDE where to find the abstract method. this also tells us that this method comes from an interface or an abstract class
- we can implement as many interfaces as we want, but we can only extend/inherit one class; multiple inheritance is not allowed
- sudokugame: we need a way for the javafx code to send messages to this UI class which i wrote.
    - I can achieve this class by making this class implements the EventHandler interface and register this interface with every part of the application which the user can manipulate

Every APP that you will build must start with some form of problem domain analysis

- ask "what data does my app need to represent?"
- "what problem does my app need to solve for the user?"

In this lesson, we will build the first few classes for the Sudoku game

- these classes are the foundation of the app as we will build the rest of the application on top of these classes
- these classes are part of the problemdomain folder
    - folder structure so far: src → sudoku → problemdomain
- first, we will build the **virtual representation** of the sudoku game
    - create a [SudokuGame.java] which contains a class under problemdomain folder
    - the representation of the game has two properties: gameState and gridState
    - gameState is type ENUM
    - gridState is type 2d integer array
    - static int = constant for the grid size, 9
    - getter for the gridState is written to be immutable by duplicating a copy of the original state because if passed the actual address to whichever object that calls it, it will be able to manipulate the actual gridState, which is something we dont want
    - we will later create a static utility function to perform this array copy, which protects the actual sudoku object from being manipulated
    - the SudokuGame class will implement "Serializable" which allows the game to write to an actual file on the operating system
    - we will also create a [Coordinates.java] which contains a class under the problem domain folder
        - this class contains 2 private integer field: x and y
        - it will also contains some helpful methods which we will touch on after when we write the user interface
        - also create a constructor to set the private x and y fields and getter methods
        - equals() method to check if coordinates object are equal; this method will have @Override on top of it (research what this does!!)
        - we will store the coordinates object in hashmaps, they will be KEYS to the USER INTERFACES (values)
        - we will also implement the hashCode() method which will be a unique identifier for the Coordinates object using the Objects.hash(x, y) method; this method also has a @Override
    - create a [IStorage.java] file which contains a interface under the problem domain folder
        - interface application: design parts of your upfront ahead of time; this is called design by contract (DbC)
        - use to read from and write to files on operating system; expects to throw IOException
- ask these questions about our data to best determine how to model it
    - two great tools to model the data which do not change throughout the runtime of the application:
        - static final variables and enums
    - create a new folder under the sudoku folder structure called, constants
        - create a [GameState.java] which contains a enum file under the constants folder
            - this represents all the potential states our game might be in
                - COMPLETE, ACTIVE, NEW
        - create a [Messages.java] file which contains class under the constants folder
            - these are the constants messages that will pop up in application
                - for example, a GAME_COMPLETE static final String that will pop up in a dialog (user interface) after the user wins the game
                - a ERROR static final String that will pop up when there is an error
        - create a [Rows.java] file which contains enum under the constants folder
            - helps us for legibility concerns
            - TOP, MIDDLE, BOTTOM

We will build the [main.java] class properly when we talk about Application Containers 

Every application needs an ENTRY POINT (Application Container)

- we will setup our entry point for our sudoku
    - create [SudokuApplication.java] file which contains a SudokuApplication class under the sudoku game folder
        - this application uses JavaFX so you need to import javafx.application.Application, javafx.fxml.FXMLLoader, javafx.scene.Parent, javafx.scene.Scene, javafx.stage.Stage
        - this class inherits (extends) from the Application class from javafx
        - this class will have a property called uiImpl (ui implementation) that references to IUserInterfaceContract.View which is the user interface
            - this guy likes to prefix (before) UserInterface with the letter I (i)
            - he also names the instance variable: uiImpl
        - the Application class comes with a start(Stage primaryStage) method which we will implement
            - we instantiate the uiImpl
            - State is a basic window type which JavaFX gives us so that we can modify it
            - we will also call the SudokuBuildLogic.build(uiImpl) static method, which we will build at the very end
                - this function contains the build logic which is like the dependency injection type setup
                - this function could fail so we need to wrap it in a try catch block, which catches IOException if there is an error occuring
            - we will also need a main method, which will call the launch(args) method
        - now, we need to figure out how we can import JavaFX into IntelliJ, for myself you need to do that for VSCode
            - IntelliJ, File → Project Structure → Libraries → Plus button → Java → Select the "lib" folder inside of the javafx-sdk-11.0.2, which you will need to download
- the [Main.java] file which contains a Main class is for convenience to be able to launch the application from IntelliJ IDEA
    - if we don't have this file, when we launch the app, it will crash
    - inside this file, we will launch our SudokuApplication by instantiating it

Now we are going to build the User Interface for the Sudoku game

- author designs the user interface for the app ahead of time using InVisionApp
- before we get to implementing the user interface, author likes to design it in a class we will talk to using java Interfaces
- create a userinterface folder
    - create a [IUserInterfaceContract.java] file which contains an interface
        - watch the working class java video on when to use interfaces vs abstract classes
        - within this interface, create another interface call EventListener nested within IUserInterfaceContract
        - we are using IUserInterfaceContract as a namespace or a way to differentiating different interfaces because most user interfaces have a EventListener and View interfaces so this namespace will allow us to point to the one we want
        - EventListener interface will be a controller / presenter
        - View interface is like the view from 3 layers software architecture, which is part of the application which binds the user interface
    - create a [SudokuTextField.java] file which extends the TextField class from javafx, not java.awt
        - maintains the x and y coordinates with constructor and getter methods (use intellij auto complete feature menu)
        - override two method from the parent class
    - create a [UserInterfaceImpl.java] file
        - in this file, we will build the user interface code
        - implements (extend) IUserInterfaceContract.View and EventHandler<KeyEvent>
        - properties: Stage (the background window), Group (like a div)
        - property: HashMap to store all 81 different text fields
        - property: IUserInterfaceContract.EventListener (like a controller/presenter) where the user will pass events. The controlLogic class will interrept the events and pass messages between the view(frontend/ui) and the backend
        - we will have a buildLogic that assigns our controlLogic (controller/presenter) to this particular view (UI/frontend) through the interface
        - create a drawGridLines method.
            - use the Rectangle class from javafx to create the UI for both horizontal and vertical lines (notice the similarity in function, so we create a getLine() helper function that help break down our code to improve readibility and reduce lines of code)
            - after creating all lines UI, we need to ADD the line UI elements to the root (Group type, which is like a div)

JavaFX works with four main components from which others derive, these are: Stage, Scene, Node and Layout.

- *Stage*

    Is the central element, acting as a container for all the scenes. Following the analogy with a Theater, is the space where everything happens inside.

- *Scene*

    Is a smaller element that that contains a group of nodes (GUI elements) and contains them.

- *Node*

    Are the elements that compose a scene (buttons, text-boxes, labels, etc…). It is possible and usually the case, nodes have children nodes under their hierarchy, having the ability to nest/be nested.

- *Layout*

    As the name says, it is responsible for defining how the nodes and elements are shown on the screen. JavaFX provides many layout variations, between them we can exemplify:

    - AnchorPane, GridPane, TilePane, BorderPane, FlowPane, ...
- helpful Javafx links
    - [https://medium.com/@rafaelgurgel/javafx-basic-concepts-9b40c271e78a](https://medium.com/@rafaelgurgel/javafx-basic-concepts-9b40c271e78a)
    - [https://www.baeldung.com/javafx](https://www.baeldung.com/javafx)
    - [https://medium.com/@gabriellamedas/my-first-gui-application-with-javafx-3908b843abd8](https://medium.com/@gabriellamedas/my-first-gui-application-with-javafx-3908b843abd8)